//! Build script to generate operator book docs.

use std::env::VarError;
use std::error::Error;
use std::fs::File;
use std::io::{BufRead, BufReader, BufWriter, Write};
use std::path::{Path, PathBuf};

use hydroflow_lang::graph::ops::OPERATORS;

const SUMMARY_FILENAME: &str = "SUMMARY.md";
const SUMMARY_FILENAME_TMP: &str = "SUMMARY.md.tmp";
const INDEX_FILENAME: &str = "surface_ops.gen.md";

fn book_file(filename: impl AsRef<Path>) -> Result<PathBuf, VarError> {
    let mut pathbuf = PathBuf::new();
    pathbuf.push(std::env::var("CARGO_MANIFEST_DIR")?);
    pathbuf.push("../book/");
    pathbuf.push(filename);
    Ok(pathbuf)
}

fn book_file_reader(filename: impl AsRef<Path>) -> Result<BufReader<File>, Box<dyn Error>> {
    let pathbuf = book_file(filename)?;
    Ok(BufReader::new(File::open(pathbuf)?))
}

fn book_file_writer(filename: impl AsRef<Path>) -> Result<BufWriter<File>, Box<dyn Error>> {
    let pathbuf = book_file(filename)?;
    Ok(BufWriter::new(File::create(pathbuf)?))
}

fn update_summary() -> Result<(), Box<dyn Error>> {
    {
        let read_summary = book_file_reader(SUMMARY_FILENAME)?;
        let mut write_summary = book_file_writer(SUMMARY_FILENAME_TMP)?;

        let mut read_lines = read_summary.lines().peekable();
        while let Some(line_result) = read_lines.next() {
            let line = line_result?;
            writeln!(write_summary, "{}", line)?;

            if line.ends_with(&*format!("{})", INDEX_FILENAME)) {
                writeln!(write_summary, "    <!-- AUTOGENERATED SECTION START -->")?;
                // Write new OPs.
                for op in OPERATORS {
                    // TODO(mingwei): DRY
                    let op_filename = format!("surface_op_{}.gen.md", op.name);
                    writeln!(write_summary, "    - [`{}`]({})", op.name, op_filename)?;
                }
                writeln!(write_summary, "    <!-- AUTOGENERATED SECTION END -->")?;
                // Ignore old OPs.
                while read_lines
                    .peek()
                    .and_then(|result| result.as_ref().ok())
                    .map(|line| line.starts_with("    "))
                    .unwrap_or(false)
                {
                    read_lines
                        .next()
                        .ok_or("Unexpected EOF in `SUMMARY.md` ops section.")??;
                }
            }
        }
    }

    std::fs::rename(
        book_file(SUMMARY_FILENAME_TMP)?,
        book_file(SUMMARY_FILENAME)?,
    )?;

    Ok(())
}

fn main() -> Result<(), Box<dyn Error>> {
    update_summary()?;

    let mut write_index = book_file_writer(INDEX_FILENAME)?;
    for op in OPERATORS {
        let op_filename = format!("surface_op_{}.gen.md", op.name);
        writeln!(write_index, "- [`{}`](./{})", op.name, op_filename)?;

        let mut write_op = book_file_writer(op_filename)?;
        writeln!(write_op, "<!-- AUTOGENERATED -->")?;
        writeln!(write_op, "# `{}`", op.name)?;
        writeln!(write_op, "```rust")?;
        writeln!(write_op, "{}", (op.doc_example)().to_string())?;
        writeln!(write_op, "```")?;
    }

    Ok(())
}
