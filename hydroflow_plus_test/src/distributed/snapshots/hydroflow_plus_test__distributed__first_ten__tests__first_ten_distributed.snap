---
source: hydroflow_plus_test/src/distributed/first_ten.rs
expression: built.ir()
---
[
    ForEach {
        f: Expr::Block {
            attrs: [],
            label: None,
            block: Block {
                brace_token: Brace,
                stmts: [
                    Stmt::Item(
                        Item::Use {
                            attrs: [],
                            vis: Visibility::Inherited,
                            use_token: Use,
                            leading_colon: None,
                            tree: UseTree::Path(
                                UsePath {
                                    ident: Ident {
                                        sym: crate,
                                    },
                                    colon2_token: PathSep,
                                    tree: UseTree::Path(
                                        UsePath {
                                            ident: Ident {
                                                sym: __staged,
                                            },
                                            colon2_token: PathSep,
                                            tree: UseTree::Path(
                                                UsePath {
                                                    ident: Ident {
                                                        sym: distributed,
                                                        span: bytes(242..253),
                                                    },
                                                    colon2_token: PathSep,
                                                    tree: UseTree::Path(
                                                        UsePath {
                                                            ident: Ident {
                                                                sym: first_ten,
                                                                span: bytes(255..264),
                                                            },
                                                            colon2_token: PathSep,
                                                            tree: UseTree::Glob(
                                                                UseGlob {
                                                                    star_token: Star,
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ),
                            semi_token: Semi,
                        },
                    ),
                    Stmt::Expr(
                        Expr::Closure {
                            attrs: [],
                            lifetimes: None,
                            constness: None,
                            movability: None,
                            asyncness: None,
                            capture: None,
                            or1_token: Or,
                            inputs: [
                                Pat::Type {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: n,
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: SendOverNetwork,
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ],
                            or2_token: Or,
                            output: ReturnType::Default,
                            body: Expr::Macro {
                                attrs: [],
                                mac: Macro {
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: println,
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                    bang_token: Not,
                                    delimiter: MacroDelimiter::Paren(
                                        Paren,
                                    ),
                                    tokens: TokenStream [
                                        Literal {
                                            lit: "{}",
                                            span: bytes(216..220),
                                        },
                                        Punct {
                                            char: ',',
                                            spacing: Alone,
                                        },
                                        Ident {
                                            sym: n,
                                        },
                                        Punct {
                                            char: '.',
                                            spacing: Alone,
                                        },
                                        Ident {
                                            sym: n,
                                        },
                                    ],
                                },
                            },
                        },
                        None,
                    ),
                ],
            },
        },
        input: Network {
            from_location: Process(
                0,
            ),
            to_location: Process(
                1,
            ),
            serialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| data | { hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: distributed :: first_ten :: SendOverNetwork > (& data) . unwrap () . into () }",
                        ],
                    },
                ),
            ),
            instantiate_fn: <network instantiate>,
            deserialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| res | { hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: distributed :: first_ten :: SendOverNetwork > (& res . unwrap ()) . unwrap () }",
                        ],
                    },
                ),
            ),
            input: Map {
                f: Expr::Block {
                    attrs: [],
                    label: None,
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Item(
                                Item::Use {
                                    attrs: [],
                                    vis: Visibility::Inherited,
                                    use_token: Use,
                                    leading_colon: None,
                                    tree: UseTree::Path(
                                        UsePath {
                                            ident: Ident {
                                                sym: crate,
                                            },
                                            colon2_token: PathSep,
                                            tree: UseTree::Path(
                                                UsePath {
                                                    ident: Ident {
                                                        sym: __staged,
                                                    },
                                                    colon2_token: PathSep,
                                                    tree: UseTree::Path(
                                                        UsePath {
                                                            ident: Ident {
                                                                sym: distributed,
                                                                span: bytes(71..82),
                                                            },
                                                            colon2_token: PathSep,
                                                            tree: UseTree::Path(
                                                                UsePath {
                                                                    ident: Ident {
                                                                        sym: first_ten,
                                                                        span: bytes(84..93),
                                                                    },
                                                                    colon2_token: PathSep,
                                                                    tree: UseTree::Glob(
                                                                        UseGlob {
                                                                            star_token: Star,
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    semi_token: Semi,
                                },
                            ),
                            Stmt::Expr(
                                Expr::Closure {
                                    attrs: [],
                                    lifetimes: None,
                                    constness: None,
                                    movability: None,
                                    asyncness: None,
                                    capture: None,
                                    or1_token: Or,
                                    inputs: [
                                        Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: n,
                                            },
                                            subpat: None,
                                        },
                                    ],
                                    or2_token: Or,
                                    output: ReturnType::Default,
                                    body: Expr::Struct {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: SendOverNetwork,
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                        brace_token: Brace,
                                        fields: [
                                            FieldValue {
                                                attrs: [],
                                                member: Member::Named(
                                                    Ident {
                                                        sym: n,
                                                    },
                                                ),
                                                colon_token: None,
                                                expr: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: n,
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            },
                                        ],
                                        dot2_token: None,
                                        rest: None,
                                    },
                                },
                                None,
                            ),
                        ],
                    },
                },
                input: Source {
                    source: Iter(
                        Expr::Block {
                            attrs: [],
                            label: None,
                            block: Block {
                                brace_token: Brace,
                                stmts: [
                                    Stmt::Item(
                                        Item::Use {
                                            attrs: [],
                                            vis: Visibility::Inherited,
                                            use_token: Use,
                                            leading_colon: None,
                                            tree: UseTree::Path(
                                                UsePath {
                                                    ident: Ident {
                                                        sym: crate,
                                                    },
                                                    colon2_token: PathSep,
                                                    tree: UseTree::Path(
                                                        UsePath {
                                                            ident: Ident {
                                                                sym: __staged,
                                                            },
                                                            colon2_token: PathSep,
                                                            tree: UseTree::Path(
                                                                UsePath {
                                                                    ident: Ident {
                                                                        sym: distributed,
                                                                        span: bytes(27..38),
                                                                    },
                                                                    colon2_token: PathSep,
                                                                    tree: UseTree::Path(
                                                                        UsePath {
                                                                            ident: Ident {
                                                                                sym: first_ten,
                                                                                span: bytes(40..49),
                                                                            },
                                                                            colon2_token: PathSep,
                                                                            tree: UseTree::Glob(
                                                                                UseGlob {
                                                                                    star_token: Star,
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            semi_token: Semi,
                                        },
                                    ),
                                    Stmt::Expr(
                                        Expr::Range {
                                            attrs: [],
                                            start: Some(
                                                Expr::Lit {
                                                    attrs: [],
                                                    lit: Lit::Int {
                                                        token: 0,
                                                    },
                                                },
                                            ),
                                            limits: RangeLimits::HalfOpen(
                                                DotDot,
                                            ),
                                            end: Some(
                                                Expr::Lit {
                                                    attrs: [],
                                                    lit: Lit::Int {
                                                        token: 10,
                                                    },
                                                },
                                            ),
                                        },
                                        None,
                                    ),
                                ],
                            },
                        },
                    ),
                    location_kind: Process(
                        0,
                    ),
                },
            },
        },
    },
]
