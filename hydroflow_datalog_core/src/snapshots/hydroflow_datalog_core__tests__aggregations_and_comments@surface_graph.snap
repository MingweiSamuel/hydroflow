---
source: hydroflow_datalog_core/src/lib.rs
expression: flat_graph_ref.surface_syntax_string()
---
2v1 = unique :: < 'tick > ();
3v1 = tee ();
4v1 = merge ();
5v1 = unique :: < 'tick > ();
8v1 = unique :: < 'tick > ();
10v1 = source_stream (ints);
11v1 = for_each (| v | result . send (v) . unwrap ());
12v1 = for_each (| v | result2 . send (v) . unwrap ());
13v1 = map (| row : (_ , _ ,) | ((row . 1 ,) , ((row . 0) ,)));
14v1 = group_by :: < 'tick , (_ ,) , (_ ,) > (| | ((hydroflow :: rustc_hash :: FxHashSet :: default () , 0) ,) , | old : & mut (_ ,) , val : (_ ,) | { let (set , count) : & mut (hydroflow :: rustc_hash :: FxHashSet < _ > , _) = & mut old . 0 ; if set . insert (val . 0) { * count += 1 } });
15v1 = map (| (g , a) : ((_ ,) , _) | (a . 0 . 1 , g . 0 ,));
16v1 = map (| row : (_ , _ ,) | ((row . 1 ,) , (row . 0 ,)));
17v1 = group_by :: < 'tick , (_ ,) , (_ ,) > (| | (0 ,) , | old : & mut (_ ,) , val : (_ ,) | { old . 0 += val . 0 ; });
18v1 = map (| (g , a) : ((_ ,) , _) | (a . 0 , g . 0 ,));
19v1 = next_tick ();
20v1 = map (| row : (_ , _ ,) | ((row . 1 ,) , (row . 0 ,)));
21v1 = group_by :: < 'tick , (_ ,) , (_ ,) > (| | (None ,) , | old : & mut (_ ,) , val : (_ ,) | { let prev : & mut Option < _ > = & mut old . 0 ; if prev . is_none () { * prev = Some (val . 0) } });
22v1 = map (| (g , a) : ((_ ,) , _) | (a . 0 . unwrap () , g . 0 ,));

10v1 -> 2v1;
2v1 -> 3v1;
4v1 -> 5v1;
22v1 -> 8v1;
5v1 -> 11v1;
8v1 -> 12v1;
15v1 -> 4v1;
14v1 -> 15v1;
13v1 -> 14v1;
3v1 -> 13v1;
19v1 -> 4v1;
18v1 -> 19v1;
17v1 -> 18v1;
16v1 -> 17v1;
3v1 -> 16v1;
21v1 -> 22v1;
20v1 -> 21v1;
3v1 -> 20v1;

