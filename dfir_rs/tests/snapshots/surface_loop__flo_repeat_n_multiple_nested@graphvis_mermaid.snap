---
source: dfir_rs/tests/surface_loop.rs
expression: "df.meta_graph().unwrap().to_mermaid(& Default :: default())"
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
classDef otherClass fill:#fdc,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa
1v1[\"(1v1) <code>source_iter([&quot;alice&quot;, &quot;bob&quot;])</code>"/]:::pullClass
2v1[\"(2v1) <code>batch()</code>"/]:::pullClass
3v1[\"(3v1) <code>flatten()</code>"/]:::pullClass
4v1[\"(4v1) <code>repeat_n(3)</code>"/]:::pullClass
5v1[\"(5v1) <code>flatten()</code>"/]:::pullClass
6v1[\"(6v1) <code>inspect(|x| println!(&quot;{:?} {}&quot;, x, context.is_first_loop_iteration()))</code>"/]:::pullClass
7v1[/"(7v1) <code>tee()</code>"\]:::pushClass
8v1[\"(8v1) <code>repeat_n(3)</code>"/]:::pullClass
9v1[\"(9v1) <code>inspect(|x| println!(&quot;{} {:?} {}&quot;, line!(), x, context.is_first_loop_iteration()))</code>"/]:::pullClass
10v1[/"<div style=text-align:center>(10v1)</div> <code>assert_eq([<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>])</code>"\]:::pushClass
11v1[\"(11v1) <code>repeat_n(3)</code>"/]:::pullClass
12v1[\"(12v1) <code>inspect(|x| println!(&quot;{} {:?} {}&quot;, line!(), x, context.is_first_loop_iteration()))</code>"/]:::pullClass
13v1[/"<div style=text-align:center>(13v1)</div> <code>assert_eq([<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>    vec![&quot;alice&quot;, &quot;bob&quot;],<br>])</code>"\]:::pushClass
14v1["(14v1) <code>handoff</code>"]:::otherClass
15v1["(15v1) <code>handoff</code>"]:::otherClass
16v1["(16v1) <code>handoff</code>"]:::otherClass
17v1["(17v1) <code>handoff</code>"]:::otherClass
2v1-->3v1
1v1-->14v1
6v1-->7v1
5v1-->6v1
4v1-->5v1
3v1-->15v1
9v1-->10v1
8v1-->9v1
7v1-->16v1
12v1-->13v1
11v1-->12v1
7v1-->17v1
14v1-->2v1
15v1--x4v1; linkStyle 13 stroke:red
16v1--x8v1; linkStyle 14 stroke:red
17v1--x11v1; linkStyle 15 stroke:red
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    1v1
    subgraph sg_1v1_var_usrs1 ["var <tt>usrs1</tt>"]
        1v1
    end
end
subgraph sg_2v1 ["sg_2v1 stratum 0"]
    2v1
    3v1
    subgraph sg_2v1_var_usrs2 ["var <tt>usrs2</tt>"]
        2v1
        3v1
    end
end
subgraph sg_3v1 ["sg_3v1 stratum 0"]
    4v1
    5v1
    6v1
    7v1
    subgraph sg_3v1_var_usrs3 ["var <tt>usrs3</tt>"]
        4v1
        5v1
        6v1
        7v1
    end
end
subgraph sg_4v1 ["sg_4v1 stratum 0"]
    8v1
    9v1
    10v1
end
subgraph sg_5v1 ["sg_5v1 stratum 0"]
    11v1
    12v1
    13v1
end
