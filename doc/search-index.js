var searchIndex = JSON.parse('{\
"hydroflow":{"doc":"","t":[0,0,14,14,0,0,14,2,14,3,8,0,12,0,0,16,16,16,16,16,16,8,8,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,2,3,8,2,2,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,16,16,6,6,6,16,6,6,16,16,6,16,16,6,8,8,8,11,11,11,0,0,11,0,11,11,11,11,11,0,11,11,11,11,11,10,11,11,11,10,10,0,11,0,11,11,11,11,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,10,11,6,8,6,6,10,10,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,16,16,8,16,8,8,11,11,10,11,11,0,11,0,0,0,11,11,10,0,11,11,0,11,11,0,0,0,11,0,0,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,12,8,3,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,8,16,3,16,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,8,8,16,8,16,8,8,16,8,0,10,10,10,0,10,10,0,10,0,0,0,0,10,3,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,4,16,16,4,4,3,4,4,8,8,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,11,11,11,11,11,11,11,11,0,0,0,11,11,11,0,11,11,11,11,11,11,0,0,0,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,10,10,10,10,10,10,10,10,8,8,8,16,3,8,3,10,11,11,11,11,11,11,11,10,11,11,0,11,10,11,10,11,11,11,11,10,11,11,11,16,8,8,8,16,10,10,10,3,8,3,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,6,8,3,3,4,6,6,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,8,16,8,8,16,8,10,10,10,3,3,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11],"n":["builder","compiled","hydroflow_parser","hydroflow_syntax","lang","scheduled","tl","tokio","tt","HydroflowBuilder","IntoHydroflow","build","hydroflow","prelude","surface","Build","Build","InputHandoffs","ItemIn","ItemOut","OutputHandoffs","PullBuild","PushBuild","build","build","pull_batch","pull_chain","pull_cross_join","pull_filter","pull_filter_map","pull_flatten","pull_fold_epoch","pull_half_hash_join","pull_handoff","pull_iter","pull_join","pull_map","push_filter","push_filter_map","push_flatten","push_for_each","push_handoff","push_map","push_partition","push_tee","BatchPullBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","ChainPullBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","CrossJoinPullBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","FilterPullBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","FilterMapPullBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","FlattenPullBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","FoldEpochPullBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","HalfHashJoinPullBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","HandoffPullBuild","borrow","borrow_mut","build","default","from","into","new","try_from","try_into","type_id","IterPullBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","JoinPullBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","MapPullBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","FilterPushBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","FilterMapPushBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","FlattenPushBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","ForEachPushBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","HandoffPushBuild","borrow","borrow_mut","build","default","from","into","new","try_from","try_into","type_id","MapPushBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","PartitionPushBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","TeePushBuild","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","BaseSurface","HydroflowBuilder","IntoHydroflow","PullSurface","PushSurface","VecHandoff","add_channel_input","add_input_from_stream","add_read_tcp_stream","add_subgraph","add_subgraph_stratified","add_tcp_stream","add_write_tcp_stream","any_ref","borrow","borrow","borrow_mut","borrow_mut","build","default","default","from","from","give","give","give","hydroflow","into","into","into_hydroflow","into_hydroflow","into_hydroflow","is_bottom","make_edge","new","start_iter","start_tee","take_inner","try_from","try_from","try_into","try_into","type_id","type_id","wrap_input","wrap_output","AssembleFlowGraph","BaseSurface","Build","Build","FilterMapNoCtxFn","FilterNoCtxFn","ForEachNoCtxFunc","InputHandoffs","InspectMapFunc","InspectMapNoCtxFunc","ItemIn","ItemOut","MapNoCtxFn","Output","OutputHandoffs","PartitionNoCtxOutput","PullSurface","PushSurface","PushSurfaceReversed","batch_with","chain","cross_join","exchange","filter","filter","filter_map","filter_map","filter_map_with_context","filter_with_context","flat_map","flat_map_with_context","flatten","flatten","fold_epoch","for_each","for_each_with_context","half_hash_join","insert_dep","inspect","inspect_with_context","join","make_parts","make_parts","map","map","map_scan","map_scan","map_with_context","partition","partition_with_context","pivot","pull_batch","pull_chain","pull_cross_join","pull_fold_epoch","pull_half_hash_join","pull_handoff","pull_iter","pull_join","pull_to_push","push_for_each","push_handoff","push_partition","push_pivot","push_start","push_tee","push_to","tee","BroadcastSurface","Exchange","ExchangeSurface","NetworkOut","broadcast","exchange","FilterPushSurfaceReversed","FilterSurface","borrow","borrow","borrow_mut","borrow_mut","broadcast","exchange","from","from","insert_dep","insert_dep","into","into","make_parts","make_parts","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","FilterMapPushSurfaceReversed","FilterMapSurface","borrow","borrow","borrow_mut","borrow_mut","broadcast","exchange","from","from","insert_dep","into","into","make_parts","make_parts","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","FlattenPushSurfaceReversed","FlattenSurface","borrow","borrow","borrow_mut","borrow_mut","broadcast","exchange","from","from","insert_dep","insert_dep","into","into","make_parts","make_parts","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","MapPushSurfaceReversed","MapSurface","borrow","borrow","borrow_mut","borrow_mut","broadcast","exchange","from","from","insert_dep","insert_dep","into","into","make_parts","make_parts","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","MapScanPushSurfaceReversed","MapScanSurface","borrow","borrow","borrow_mut","borrow_mut","broadcast","exchange","from","from","insert_dep","insert_dep","into","into","make_parts","make_parts","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","PivotSurface","borrow","borrow_mut","from","into","make_parts","new","try_from","try_into","type_id","BatchPullSurface","borrow","borrow_mut","broadcast","exchange","from","insert_dep","into","make_parts","new","try_from","try_into","type_id","ChainPullSurface","borrow","borrow_mut","broadcast","exchange","from","insert_dep","into","make_parts","new","try_from","try_into","type_id","CrossJoinPullSurface","borrow","borrow_mut","broadcast","exchange","from","insert_dep","into","make_parts","new","try_from","try_into","type_id","FoldEpochPullSurface","borrow","borrow_mut","broadcast","exchange","from","insert_dep","into","make_parts","new","try_from","try_into","type_id","HalfHashJoinPullSurface","borrow","borrow_mut","broadcast","exchange","from","insert_dep","into","make_parts","new","try_from","try_into","type_id","HandoffPullSurface","borrow","borrow_mut","broadcast","exchange","from","insert_dep","into","make_parts","new","try_from","try_into","type_id","IterPullSurface","borrow","borrow_mut","broadcast","exchange","from","insert_dep","into","make_parts","new","try_from","try_into","type_id","JoinPullSurface","borrow","borrow_mut","broadcast","exchange","from","insert_dep","into","make_parts","new","try_from","try_into","type_id","ForEachPushSurfaceReversed","borrow","borrow_mut","from","insert_dep","into","make_parts","new","try_from","try_into","type_id","HandoffPushSurfaceReversed","borrow","borrow_mut","from","insert_dep","into","make_parts","new","try_from","try_into","type_id","PartitionPushSurfaceReversed","borrow","borrow_mut","from","insert_dep","into","make_parts","new","try_from","try_into","type_id","PivotPushSurface","borrow","borrow_mut","from","into","new","push_to","try_from","try_into","type_id","StartPushSurface","borrow","borrow_mut","default","from","insert_dep","into","new","push_to","try_from","try_into","type_id","TeePushSurfaceReversed","borrow","borrow_mut","from","insert_dep","into","make_parts","new","try_from","try_into","type_id","InputBuild","Item","Item","IteratorToPusherator","Output","Pusherator","PusheratorBuild","borrow","borrow_mut","build","build","default","filter","filter","filter_map","flatten","for_each","for_each","from","give","group_by","handoff","into","map","map","new","partition","pivot","pull","pull_to_push","push_handoff","tee","tee","try_from","try_into","type_id","Filter","FilterBuild","borrow","borrow","borrow_mut","borrow_mut","build","from","from","give","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","FilterMap","FilterMapBuild","borrow","borrow","borrow_mut","borrow_mut","build","from","from","give","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","Flatten","FlattenBuild","borrow","borrow","borrow_mut","borrow_mut","build","from","from","give","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","ForEach","borrow","borrow_mut","from","give","into","new","try_from","try_into","type_id","GroupBy","borrow","borrow_mut","from","give","into","new","try_from","try_into","type_id","Map","MapBuild","borrow","borrow","borrow_mut","borrow_mut","build","from","from","give","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","Partition","PartitionBuild","borrow","borrow","borrow_mut","borrow_mut","build","from","from","give","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","Pivot","PivotBuild","borrow","borrow","borrow_mut","borrow_mut","build","from","from","into","into","new","new","run","step","try_from","try_from","try_into","try_into","type_id","type_id","BatchJoin","BatchJoinState","CrossJoin","CrossJoinState","HalfHashJoin","HalfHashJoinState","JoinState","SymmetricHashJoin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","new","new","new","new","next","next","next","next","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","PushHandoff","borrow","borrow_mut","from","give","into","new","try_from","try_into","type_id","Tee","TeeBuild","borrow","borrow","borrow_mut","borrow_mut","build","from","from","give","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","clear","collections","lattice","monotonic_map","tag","0","Clear","ClearDefault","borrow","borrow_mut","clear","clear","clone","clone_into","cmp","eq","fmt","from","hash","into","ne","partial_cmp","to_owned","try_from","try_into","type_id","0","0","0","Array","Collection","Entries","Iter","Keys","MaskedArray","Single","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","entries","entries","entries","entries","entries","entries","entries","eq","eq","eq","eq","fmt","fmt","from","from","from","from","get","get","get","get","get","get","get","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","hash","hash","hash","hash","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","keys","keys","keys","keys","keys","keys","keys","len","len","len","len","len","len","len","mask","ne","ne","ne","ne","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vals","Compare","Convert","Debottom","DebottomLr","Lattice","Lattice","LatticeRepr","Merge","Repr","Top","bottom","compare","convert","debottom","dom_pair","is_bottom","is_top","map_union","merge","ord","pair","set_union","top","top","BottomRepr","borrow","borrow_mut","debottom","from","into","is_bottom","try_from","try_into","type_id","DomPair","DomPairRepr","borrow","borrow","borrow_mut","borrow_mut","compare","convert","debottom","from","from","into","into","is_bottom","is_top","merge","top","try_from","try_from","try_into","try_into","type_id","type_id","MapTag","MapUnion","MapUnionRepr","borrow","borrow","borrow_mut","borrow_mut","compare","convert","from","from","into","into","merge","try_from","try_from","try_into","try_into","type_id","type_id","Max","MaxRepr","Min","MinRepr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compare","compare","convert","convert","from","from","from","from","into","into","into","into","is_top","merge","merge","top","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Pair","PairRepr","borrow","borrow","borrow_mut","borrow_mut","compare","debottom","from","from","into","into","is_bottom","is_top","merge","top","try_from","try_from","try_into","try_into","type_id","type_id","SetTag","SetUnion","SetUnionRepr","borrow","borrow","borrow_mut","borrow_mut","compare","convert","debottom","from","from","into","into","is_bottom","merge","try_from","try_from","try_into","try_into","type_id","type_id","TopRepr","borrow","borrow_mut","from","into","is_top","top","try_from","try_into","type_id","MonotonicMap","borrow","borrow_mut","clone","clone_into","default","fmt","from","get_mut","into","new_init","to_owned","try_from","try_into","type_id","ARRAY","BTREE_MAP","BTREE_SET","Bind","Bind","HASH_MAP","HASH_SET","MASKED_ARRAY","OPTION","SINGLE","Tag1","Tag2","VEC","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","HandoffId","StateId","SubgraphId","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","context","eq","eq","eq","flow_graph","fmt","fmt","fmt","fmt","fmt","from","from","from","graph","graph_ext","handoff","hash","hash","hash","input","into","into","into","ne","ne","ne","net","port","query","reactor","serialize","serialize","state","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_list","util","Context","add_state","borrow","borrow_mut","current_epoch","current_stratum","from","into","schedule_subgraph","state_mut","state_ref","try_from","try_into","type_id","waker","FlowEdgeSet","FlowGraph","FlowNodeId","FlowPartitionedGraph","add_edge","add_flow_graph","add_handoff_id","add_node","append","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","eq","fmt","fmt","fmt","fmt","from","from","from","from","hash","into","into","into","into","ne","new","new","new","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","HandoffData","Hydroflow","add_channel_input","add_dependencies","add_input","add_input_from_stream","add_read_tcp_stream","add_state","add_subgraph","add_subgraph_2in_2out","add_subgraph_2in_out","add_subgraph_2sink","add_subgraph_in_2out","add_subgraph_in_out","add_subgraph_n_m","add_subgraph_sink","add_subgraph_source","add_subgraph_stratified","add_subgraph_stratified_n_m","add_tcp_stream","add_write_tcp_stream","borrow","borrow","borrow_mut","borrow_mut","context_mut","current_epoch","current_stratum","default","fmt","from","from","generate_dot","generate_json","generate_mermaid","global_graph","inbound_tcp_vertex","inbound_tcp_vertex_port","into","into","make_edge","new","new","new_with_graph","next_stratum","outbound_tcp_vertex","reactor","recv_events","recv_events_async","run","run_async","run_available","run_epoch","run_stratum","serde_graph","try_from","try_from","try_into","try_into","try_recv_events","type_id","type_id","write_dot","write_json","write_mermaid","GraphExt","add_channel_input","add_input","add_input_from_stream","add_subgraph_2in_2out","add_subgraph_2in_out","add_subgraph_2sink","add_subgraph_in_2out","add_subgraph_in_out","add_subgraph_sink","add_subgraph_source","CanReceive","Handoff","HandoffMeta","Inner","TeeingHandoff","TryCanReceive","VecHandoff","any_ref","any_ref","borrow","borrow_mut","clone","clone_into","default","from","give","give","give","handoff_list","into","is_bottom","is_bottom","take_inner","take_inner","tee","to_owned","try_from","try_give","try_give","try_into","type_id","Ctx","HandoffList","PortList","PortListSplit","Suffix","make_ctx","set_graph_meta","split_ctx","Buffer","Give","Input","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","flush","from","from","give","give","give","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Message","address","batch","borrow","borrow_mut","clone","clone_into","decode","eq","fmt","from","into","ne","network_vertex","to_owned","try_from","try_into","type_id","Address","Polarity","Port","PortCtx","RECV","RecvCtx","RecvPort","SEND","SendCtx","SendPort","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","give","give","into","into","into","into","ref_cast","ref_cast_mut","take_inner","take_inner","try_from","try_from","try_from","try_from","try_give","try_give","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Operator","Query","borrow","borrow","borrow_mut","borrow_mut","concat","concat","default","filter","from","from","into","into","map","new","run_available","sink","source","tee","try_from","try_from","try_into","try_into","type_id","type_id","Reactor","borrow","borrow_mut","clone","clone_into","from","into","into_waker","new","to_owned","trigger","try_from","try_into","type_id","StateHandle","borrow","borrow_mut","clone","clone_into","from","into","to_owned","try_from","try_into","type_id","Extend","Extended","Split","SplitPrefix","Suffix","TypeList","extend","split","split","Once","SendOnce","borrow","borrow","borrow_mut","borrow_mut","from","from","get","into","into","once","send","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["hydroflow","","","","","","","","","hydroflow::builder","","","","","","hydroflow::builder::build","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::builder::build::pull_batch","","","","","","","","","","hydroflow::builder::build::pull_chain","","","","","","","","","","hydroflow::builder::build::pull_cross_join","","","","","","","","","","hydroflow::builder::build::pull_filter","","","","","","","","","","hydroflow::builder::build::pull_filter_map","","","","","","","","","","hydroflow::builder::build::pull_flatten","","","","","","","","","","hydroflow::builder::build::pull_fold_epoch","","","","","","","","","","hydroflow::builder::build::pull_half_hash_join","","","","","","","","","","hydroflow::builder::build::pull_handoff","","","","","","","","","","","hydroflow::builder::build::pull_iter","","","","","","","","","","hydroflow::builder::build::pull_join","","","","","","","","","","hydroflow::builder::build::pull_map","","","","","","","","","","hydroflow::builder::build::push_filter","","","","","","","","","","hydroflow::builder::build::push_filter_map","","","","","","","","","","hydroflow::builder::build::push_flatten","","","","","","","","","","hydroflow::builder::build::push_for_each","","","","","","","","","","hydroflow::builder::build::push_handoff","","","","","","","","","","","hydroflow::builder::build::push_map","","","","","","","","","","hydroflow::builder::build::push_partition","","","","","","","","","","hydroflow::builder::build::push_tee","","","","","","","","","","hydroflow::builder::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::builder::surface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::builder::surface::exchange","","","","","","hydroflow::builder::surface::filter","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::builder::surface::filter_map","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::builder::surface::flatten","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::builder::surface::map","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::builder::surface::map_scan","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::builder::surface::pivot","","","","","","","","","","hydroflow::builder::surface::pull_batch","","","","","","","","","","","","","hydroflow::builder::surface::pull_chain","","","","","","","","","","","","","hydroflow::builder::surface::pull_cross_join","","","","","","","","","","","","","hydroflow::builder::surface::pull_fold_epoch","","","","","","","","","","","","","hydroflow::builder::surface::pull_half_hash_join","","","","","","","","","","","","","hydroflow::builder::surface::pull_handoff","","","","","","","","","","","","","hydroflow::builder::surface::pull_iter","","","","","","","","","","","","","hydroflow::builder::surface::pull_join","","","","","","","","","","","","","hydroflow::builder::surface::push_for_each","","","","","","","","","","","hydroflow::builder::surface::push_handoff","","","","","","","","","","","hydroflow::builder::surface::push_partition","","","","","","","","","","","hydroflow::builder::surface::push_pivot","","","","","","","","","","hydroflow::builder::surface::push_start","","","","","","","","","","","","hydroflow::builder::surface::push_tee","","","","","","","","","","","hydroflow::compiled","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::compiled::filter","","","","","","","","","","","","","","","","","","","","hydroflow::compiled::filter_map","","","","","","","","","","","","","","","","","","","","hydroflow::compiled::flatten","","","","","","","","","","","","","","","","","","","","hydroflow::compiled::for_each","","","","","","","","","","hydroflow::compiled::group_by","","","","","","","","","","hydroflow::compiled::map","","","","","","","","","","","","","","","","","","","","hydroflow::compiled::partition","","","","","","","","","","","","","","","","","","","","hydroflow::compiled::pivot","","","","","","","","","","","","","","","","","","","","","hydroflow::compiled::pull","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::compiled::push_handoff","","","","","","","","","","hydroflow::compiled::tee","","","","","","","","","","","","","","","","","","","","hydroflow::lang","","","","","hydroflow::lang::clear","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::collections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::bottom","","","","","","","","","","hydroflow::lang::lattice::dom_pair","","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::map_union","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::ord","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::pair","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::set_union","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::top","","","","","","","","","","hydroflow::lang::monotonic_map","","","","","","","","","","","","","","","hydroflow::lang::tag","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::context","","","","","","","","","","","","","","","hydroflow::scheduled::flow_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::graph_ext","","","","","","","","","","","hydroflow::scheduled::handoff","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::handoff::handoff_list","","","","","","","","hydroflow::scheduled::input","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::net","","","","","","","","","","","","","","","","","","hydroflow::scheduled::net::network_vertex","hydroflow::scheduled::port","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::query","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::reactor","","","","","","","","","","","","","","hydroflow::scheduled::state","","","","","","","","","","","hydroflow::scheduled::type_list","","","","","","","","","hydroflow::scheduled::util","","","","","","","","","","","","","","","","","",""],"d":["Hydroflow’s Surface API.","","","","","","Macro creating tuple list values from list of expressions.","","Macro creating tuple list types from list of element types.","The user-facing entry point for the Surface API.","A trait to convert <code>IntoIterator</code>s for use with Hydroflow’…","Internal “subgraph builders” to implement the Surface …","","Prelude to quick-import items needed for using the Surface …","Structs used to create the user-facing Surface API.","","","","","","","","","Builds the iterator for a single run of the subgraph.","Builds the pusherator for a single run of the subgraph.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","The user-facing entry point for the Surface API.","A trait to convert <code>IntoIterator</code>s for use with Hydroflow’…","","","A VecDeque-based FIFO handoff.","Creates a new external channel input.","","","Adds a <code>pivot</code> created via the Surface API.","Adds a <code>pivot</code> created via the Surface API, with the given …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this <code>IntoIterator</code> into a hydroflow subgraph …","Convert this <code>IntoIterator</code> into a hydroflow subgraph …","Convert this <code>IntoIterator</code> into a hydroflow subgraph …","","Creates a handoff, returning push and pull ends which can …","Creates a new empty builder.","","Start a new branch for teeing.","","","","","","","","","","","Common trait shared between push and pull surface APIs.","","","","","","","","","","","","This should usually be a type which impls …","","","","","This extra layer is needed due to the ownership order. In …","","","","","","","","","","","","","","","Folds (accumulates) the input such that only the …","","","","return the id of the inserted node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","To create a output tee, use <code>HydroflowBuilder::start_tee()</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The combination of both Pull and Push surface halves.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","A trait for abstracting over the <code>.clear()</code> method available …","","","","Clears the collection without neccesarily freeing …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Merge DELTA into THIS. Return TRUE if THIS changed, FALSE …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","A map-like interface which in reality only stored one …","","","","","","","Returns the argument unchanged.","Returns the value for the monotonically increasing key, or …","Calls <code>U::from(self)</code>.","Creates a new <code>MonotonicMap</code> initialized with the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A handoff’s ID. Invalid if used in a different …","A staten handle’s ID. Invalid if used in a different …","A subgraph’s ID. Invalid if used in a different …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","This module contiains networking code.","Organizational module for Hydroflow Send/RecvCtx structs …","","","","","","","","","","","","","","","","","","","","","","The main state of the Hydroflow instance, which is …","Adds state to the context and returns the handle.","","","Gets the current epoch (local time) count.","Gets the current stratum nubmer.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Schedules a subgraph.","Returns an exclusive reference to the state.","Returns a shared reference to the state.","","","","Returns a <code>Waker</code> for interacting with async Rust.","","A graph representation of a compiled component’s graph …","A FlowGraph nodes’s ID.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","A handoff and its input and output SubgraphIds.","A Hydroflow graph. Owns, schedules, and runs the compiled …","","","","","","","","","","","","","Adds a new compiled subgraph with a variable number of …","","","Adds a new compiled subgraph with the specified inputs and …","Adds a new compiled subgraph with a variable number of …","","","","","","","Gets a exclusive (mut) ref to the internal context, …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a handoff edge and returns the corresponding send …","Create a new empty Hydroflow graph.","","Create a new empty Hydroflow graph with the given …","Go to the next stratum which has work available, possibly …","","Returns a reactor for externally scheduling subgraphs, …","Enqueues subgraphs triggered by external events, blocking …","Enqueues subgraphs triggered by external events …","Runs the dataflow graph forever.","Runs the dataflow graph forever.","Runs the dataflow until no more work is immediately …","Runs the dataflow until the next epoch begins.","Runs the current stratum of the dataflow until no more …","","","","","","Enqueues subgraphs triggered by external events without …","","","","","","Convenience extension methods for the Hydroflow struct.","","Adds an “input” operator, returning a handle to insert …","","","","","","","","","","","A handle onto the metadata part of a Handoff, with no …","","","","A VecDeque-based FIFO handoff.","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A variadic list of Handoff types, represented using a …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","An empty trait used to denote <code>Polarity</code>: either <strong>send</strong> or …","","","An uninstantiable type used to tag port <code>Polarity</code> as <strong>receive</strong>…","","","An uninstantiable type used to tag port <code>Polarity</code> as <strong>send</strong>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A handle into a specific super::graph::Hydroflow instance …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","The receiving half of a once channel.","The sending half of a once channel.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a once channel where the SendOnce end can set a …","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,158,159,158,159,158,159,0,0,158,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,23,0,0,0,0,0,0,24,24,24,24,24,24,24,28,28,24,28,24,24,28,24,28,24,28,28,28,24,28,24,160,160,160,28,24,24,24,24,28,28,24,28,24,28,24,24,24,0,0,161,162,0,0,0,161,0,0,162,163,0,164,162,0,0,0,0,161,161,161,0,0,163,0,163,163,163,163,163,0,163,161,164,164,161,165,163,163,161,161,162,0,163,0,163,163,164,164,0,0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,164,164,0,0,0,0,166,166,0,0,47,71,47,71,47,47,47,71,47,71,47,71,47,71,47,71,47,47,71,47,71,47,71,0,0,49,72,49,72,49,49,49,72,49,49,72,49,72,49,72,49,49,72,49,72,49,72,0,0,52,73,52,73,52,52,52,73,52,73,52,73,52,73,52,73,52,52,73,52,73,52,73,0,0,51,74,51,74,51,51,51,74,51,74,51,74,51,74,51,74,51,51,74,51,74,51,74,0,0,60,75,60,75,60,60,60,75,60,75,60,75,60,75,60,75,60,60,75,60,75,60,75,0,29,29,29,29,29,29,29,29,29,0,43,43,43,43,43,43,43,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,44,44,0,45,45,45,45,45,45,45,45,45,45,45,45,0,53,53,53,53,53,53,53,53,53,53,53,53,0,54,54,54,54,54,54,54,54,54,54,54,54,0,25,25,25,25,25,25,25,25,25,25,25,25,0,38,38,38,38,38,38,38,38,38,38,38,38,0,59,59,59,59,59,59,59,59,59,59,59,59,0,76,76,76,76,76,76,76,76,76,76,0,33,33,33,33,33,33,33,33,33,33,0,77,77,77,77,77,77,77,77,77,77,0,61,61,61,61,61,61,61,61,61,0,40,40,40,40,40,40,40,40,40,40,40,0,78,78,78,78,78,78,78,78,78,78,0,167,168,0,168,0,0,79,79,168,79,79,0,168,0,0,0,168,79,167,0,168,79,0,168,79,0,0,0,169,0,0,168,79,79,79,0,0,85,80,85,80,80,85,80,85,85,80,85,80,85,80,85,80,85,80,0,0,87,86,87,86,86,87,86,87,87,86,87,86,87,86,87,86,87,86,0,0,89,88,89,88,88,89,88,89,89,88,89,88,89,88,89,88,89,88,0,90,90,90,90,90,90,90,90,90,0,91,91,91,91,91,91,91,91,91,0,0,92,82,92,82,82,92,82,92,92,82,92,82,92,82,92,82,92,82,0,0,94,93,94,93,93,94,93,94,94,93,94,93,94,93,94,93,94,93,0,0,95,83,95,83,83,95,83,95,83,95,83,95,95,95,83,95,83,95,83,0,0,0,0,0,0,0,0,103,96,104,97,105,106,98,99,103,96,104,97,105,106,98,99,96,97,98,99,98,99,103,96,104,97,105,106,98,99,103,96,104,97,105,106,98,99,103,104,105,106,103,104,105,106,103,104,105,106,103,96,104,97,105,106,98,99,103,96,104,97,105,106,98,99,103,96,104,97,105,106,98,99,0,107,107,107,107,107,107,107,107,107,0,0,108,84,108,84,84,108,84,108,108,84,108,84,108,84,108,84,108,84,0,0,0,0,0,109,0,0,109,109,170,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,116,36,117,0,0,171,0,171,0,0,116,36,117,118,116,36,117,118,116,36,117,118,116,36,117,118,116,36,171,116,116,117,117,118,118,116,36,117,118,116,36,116,36,117,118,171,116,116,117,117,118,118,171,116,116,117,117,118,118,116,36,117,118,116,36,117,118,116,36,117,118,171,171,116,116,117,117,118,118,171,116,116,117,117,118,118,118,116,36,117,118,116,36,116,36,117,118,116,36,117,118,116,36,117,118,116,36,117,118,118,0,0,0,172,0,173,0,0,173,0,0,174,175,172,0,172,176,0,177,0,0,0,0,176,0,178,178,178,178,178,178,178,178,178,0,0,179,180,179,180,180,180,180,179,180,179,180,180,180,180,180,179,180,179,180,179,180,0,0,0,181,182,181,182,182,182,181,182,181,182,182,181,182,181,182,181,182,0,0,0,0,183,184,185,186,183,184,185,186,184,186,184,186,183,184,185,186,183,184,185,186,184,184,186,184,183,184,185,186,183,184,185,186,183,184,185,186,0,0,187,188,187,188,188,188,187,188,187,188,188,188,188,188,187,188,187,188,187,188,0,0,0,189,190,189,190,190,190,190,189,190,189,190,190,190,189,190,189,190,189,190,0,191,191,191,191,191,191,191,191,191,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,0,0,192,193,0,0,0,0,0,0,0,0,194,195,196,197,198,199,200,201,202,194,195,196,197,198,199,200,201,202,194,195,196,197,198,199,200,201,202,194,195,196,197,198,199,200,201,202,194,195,196,197,198,199,200,201,202,194,195,196,197,198,199,200,201,202,194,195,196,197,198,199,200,201,202,0,0,0,30,121,122,30,121,122,30,121,122,30,121,122,0,30,121,122,0,30,30,121,121,122,30,121,122,0,0,0,30,121,122,0,30,121,122,30,121,122,0,0,0,0,30,121,0,30,121,122,30,121,30,121,122,30,121,122,30,121,122,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,55,125,55,55,55,56,129,125,55,56,129,125,55,56,129,125,55,56,129,125,55,129,125,55,56,56,129,125,55,56,129,125,55,56,56,129,125,55,56,129,125,55,56,129,125,55,56,129,125,55,56,129,125,55,56,129,125,55,56,129,125,55,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,134,35,134,35,35,35,35,134,35,134,35,35,35,35,35,35,35,134,35,35,134,35,35,35,35,35,35,35,35,35,35,35,35,35,134,35,134,35,35,134,35,35,35,0,203,203,203,203,203,203,203,203,203,203,0,0,0,145,0,0,0,138,143,143,143,143,143,143,143,204,145,143,0,143,138,143,145,143,143,143,143,205,145,143,143,206,0,0,0,207,206,206,207,0,0,0,133,132,133,132,133,133,133,132,133,132,208,133,132,133,132,132,133,133,132,133,132,133,132,0,27,27,27,27,27,27,27,27,27,27,27,27,0,27,27,27,27,0,0,0,0,0,0,0,0,0,0,146,150,209,147,146,150,209,147,146,150,209,147,81,147,146,150,209,147,147,147,149,147,146,150,209,147,81,147,146,150,209,147,146,150,209,147,0,0,151,152,151,152,151,152,152,151,151,152,151,152,151,152,152,151,152,151,151,152,151,152,151,152,0,139,139,139,139,139,139,139,139,139,139,139,139,139,0,123,123,123,123,123,123,123,123,123,123,0,210,0,0,211,0,210,211,212,0,0,157,155,157,155,157,155,155,157,155,0,157,157,155,157,155,157,155],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[2,1]],[[]],[[]],[[],2],[[],3],[[],3],[[],4],0,[[]],[[]],[[5,1]],[[]],[[]],[[],5],[[],3],[[],3],[[],4],0,[[]],[[]],[[6,1]],[[]],[[]],[[],6],[[],3],[[],3],[[],4],0,[[]],[[]],[[7,1]],[[]],[[]],[[],7],[[],3],[[],3],[[],4],0,[[]],[[]],[[8,1]],[[]],[[]],[[],8],[[],3],[[],3],[[],4],0,[[]],[[]],[[9,1]],[[]],[[]],[[],9],[[],3],[[],3],[[],4],0,[[]],[[]],[[10,1]],[[]],[[]],[[],10],[[],3],[[],3],[[],4],0,[[]],[[]],[[11,1]],[[]],[[]],[[],11],[[],3],[[],3],[[],4],0,[[]],[[]],[[12,1]],[[],12],[[]],[[]],[[],12],[[],3],[[],3],[[],4],0,[[]],[[]],[[13,1]],[[]],[[]],[[],13],[[],3],[[],3],[[],4],0,[[]],[[]],[[14,1]],[[]],[[]],[[],14],[[],3],[[],3],[[],4],0,[[]],[[]],[[15,1]],[[]],[[]],[[],15],[[],3],[[],3],[[],4],0,[[]],[[]],[[16,1]],[[]],[[]],[[],16],[[],3],[[],3],[[],4],0,[[]],[[]],[[17,1]],[[]],[[]],[[],17],[[],3],[[],3],[[],4],0,[[]],[[]],[[18,1]],[[]],[[]],[[],18],[[],3],[[],3],[[],4],0,[[]],[[]],[[19,1]],[[]],[[]],[[],19],[[],3],[[],3],[[],4],0,[[]],[[]],[[20,1]],[[],20],[[]],[[]],[[],20],[[],3],[[],3],[[],4],0,[[]],[[]],[[21,1]],[[]],[[]],[[],21],[[],3],[[],3],[[],4],0,[[]],[[]],[[22,1]],[[]],[[]],[[],22],[[],3],[[],3],[[],4],0,[[]],[[]],[[23,1]],[[]],[[]],[[],23],[[],3],[[],3],[[],4],0,0,0,0,0,0,[24],[24,25],[[24,26],[[25,[[28,[27]]]]]],[[24,29],30],[[24,31,29],30],[[24,26]],[[24,26],[[33,[[28,[27]],[32,[27]]]]]],[28,34],[[]],[[]],[[]],[[]],[24,35],[[],28],[[],24],[[]],[[]],[[28,32],32],[[28,36],36],[[28,37],37],0,[[]],[[]],[[],38],[[],38],[[],38],[28,39],[24],[[],24],[24,38],[24,40],[28],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[24,41],25],[[24,42],33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],43],[[],44],[[],45],0,0,[[],[[47,[46]]]],0,[[],[[49,[48]]]],[[],49],[[],47],[[],[[52,[[51,[50]]]]]],[[],[[52,[51]]]],0,[[],52],[[],53],[[]],[[]],[[],54],[55,56],[[],[[51,[57]]]],[[],[[51,[58]]]],[[],59],[1],[1],0,[[],[[51,[50]]]],0,[[],60],[[],51],[[]],[[]],0,0,0,0,0,0,0,0,0,[[],61],0,0,0,0,0,0,[[]],[[]],0,0,0,0,[[24,[63,[62]],64],65],[[24,[67,[66,62]],66,64],68],0,0,[[]],[[]],[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[]],[[47,55],56],[[71,55],56],[[]],[[]],[[47,1]],[[71,1]],[[],47],[[],71],[47],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,[[]],[[]],[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[]],[[49,55],56],[[]],[[]],[[49,1]],[[72,1]],[[],49],[[],72],[49],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,[[]],[[]],[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[]],[[52,55],56],[[73,55],56],[[]],[[]],[[52,1]],[[73,1]],[[],52],[[],73],[52],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,[[]],[[]],[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[]],[[51,55],56],[[74,55],56],[[]],[[]],[[51,1]],[[74,1]],[[],51],[[],74],[51],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,[[]],[[]],[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[]],[[60,55],56],[[75,55],56],[[]],[[]],[[60,1]],[[75,1]],[[],60],[[],75],[60],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,[[]],[[]],[[]],[[]],[[29,1]],[[],29],[[],3],[[],3],[[],4],0,[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[43,55],56],[[]],[[43,1]],[[],43],[[],3],[[],3],[[],4],0,[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[44,55],56],[[]],[[44,1]],[[],44],[[],3],[[],3],[[],4],0,[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[45,55],56],[[]],[[45,1]],[[],45],[[],3],[[],3],[[],4],0,[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[53,55],56],[[]],[[53,1]],[[],53],[[],3],[[],3],[[],4],0,[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[54,55],56],[[]],[[54,1]],[[],54],[[],3],[[],3],[[],4],0,[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[25,55],56],[[]],[[25,1]],[41,25],[[],3],[[],3],[[],4],0,[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[38,55],56],[[]],[[38,1]],[[],38],[[],3],[[],3],[[],4],0,[[]],[[]],[[24,[63,[62,69]],[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[24,[67,[66,62,70]],66,[33,[28,32]]],[[44,[[52,[[25,[28]]]]]]]],[[]],[[59,55],56],[[]],[[59,1]],[[],59],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[[76,55],56],[[]],[[76,1]],[[],76],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[[33,55],56],[[]],[[33,1]],[42,33],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[[77,55],56],[[]],[[77,1]],[[],77],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[[]],[[],61],[61],[[],3],[[],3],[[],4],0,[[]],[[]],[[],40],[[]],[[40,55],56],[[]],[[],40],[40],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[[78,55],56],[[]],[[78,1]],[[],78],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,[[]],[[]],[[]],[79],[[],79],0,[[],80],0,0,0,[[]],[[]],[[]],0,[81],[[]],0,[[],82],[[],79],0,0,0,[[],83],0,0,[[],84],[[],3],[[],3],[[],4],0,0,[[]],[[]],[[]],[[]],[80],[[]],[[]],[85],[[]],[[]],[[],85],[[],80],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,[[]],[[]],[[]],[[]],[86],[[]],[[]],[87],[[]],[[]],[[],87],[[],86],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,[[]],[[]],[[]],[[]],[88],[[]],[[]],[89],[[]],[[]],[[],89],[[],88],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,[[]],[[]],[[]],[90],[[]],[[],90],[[],3],[[],3],[[],4],0,[[]],[[]],[[]],[91],[[]],[[],91],[[],3],[[],3],[[],4],0,0,[[]],[[]],[[]],[[]],[82],[[]],[[]],[92],[[]],[[]],[[],92],[[],82],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,[[]],[[]],[[]],[[]],[93],[[]],[[]],[94],[[]],[[]],[[],94],[[],93],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,[[]],[[]],[[]],[[]],[83],[[]],[[]],[[]],[[]],[[],95],[[],83],[95],[95,39],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],96],[[],97],[[],98],[[],99],[[[98,[100]],101],102],[[[99,[100,100,100]],101],102],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[98,103],[96,104],[97,105],[99,106],[103,32],[104,32],[105,32],[106,32],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,[[]],[[]],[[]],[107],[[]],[81,107],[[],3],[[],3],[[],4],0,0,[[]],[[]],[[]],[[]],[84],[[]],[[]],[108],[[]],[[]],[[],108],[[],84],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[109],[[[109,[110]]],[[109,[110]]]],[[]],[[[109,[111]],109],112],[[[109,[113]],109],39],[[[109,[100]],101],102],[[]],[[[109,[114]]]],[[]],[[[109,[113]],109],39],[[[109,[115]],109],[[32,[112]]]],[[]],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[116,[110]]],[[116,[110]]]],[[[36,[110]]],[[36,[110]]]],[[[117,[110]]],[[117,[110]]]],[[[118,[110]]],[[118,[110]]]],[[]],[[]],[[]],[[]],[[[116,[111]],116],112],[[[36,[111]],36],112],[[]],[116],[[[116,[119]]]],[[[117,[119]]]],[117],[[[118,[119]]]],[118],[[[116,[113]],116],39],[[[36,[113]],36],39],[[[117,[113]],117],39],[[[118,[113]],118],39],[[[116,[100]],101],102],[[[36,[100]],101],102],[[]],[[]],[[]],[[]],[[],32],[[[116,[119]]],32],[116,32],[[[117,[119]]],32],[117,32],[118,32],[[[118,[119]]],32],[[],32],[116,32],[[[116,[119]]],32],[[[117,[119]]],32],[117,32],[118,32],[[[118,[119]]],32],[[[116,[114]]]],[[[36,[114]]]],[[[117,[114]]]],[[[118,[114]]]],[[]],[[]],[[]],[[]],[116],[36],[117],[118],[[],39],[[]],[116],[[[116,[119]]]],[[[117,[119]]]],[117],[118],[[[118,[119]]]],[[],31],[[[116,[119]]],31],[116,31],[[[117,[119]]],31],[117,31],[[[118,[119]]],31],[118,31],0,[[[116,[113]],116],39],[[[36,[113]],36],39],[[[117,[113]],117],39],[[[118,[113]],118],39],[[[116,[115]],116],[[32,[112]]]],[[[36,[115]],36],[[32,[112]]]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,[[],[[32,[112]]]],[[]],[[],32],0,[[],39],[[],39],0,[[],39],0,0,0,0,[[]],0,[[]],[[]],[[],32],[[]],[[]],[[],39],[[],3],[[],3],[[],4],0,0,[[]],[[]],[[]],[[]],[[],[[32,[112]]]],[[]],[[],32],[[]],[[]],[[]],[[]],[[],39],[[],39],[[],39],[[]],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,0,[[]],[[]],[[]],[[]],[[],[[32,[112]]]],[[]],[[]],[[]],[[]],[[]],[[],39],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[32,[112]]]],[[],[[32,[112]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],39],[[],39],[[],39],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],0,0,[[]],[[]],[[]],[[]],[[],[[32,[112]]]],[[],32],[[]],[[]],[[]],[[]],[[],39],[[],39],[[],39],[[]],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,0,[[]],[[]],[[]],[[]],[[],[[32,[112]]]],[[]],[[],32],[[]],[[]],[[]],[[]],[[],39],[[],39],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,[[]],[[]],[[]],[[]],[[],39],[[]],[[],3],[[],3],[[],4],0,[[]],[[]],[[[120,[110,110]]],[[120,[110,110]]]],[[]],[[],120],[[[120,[100,100]],101],102],[[]],[120,32],[[]],[[],120],[[]],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[30,30],[121,121],[122,122],[[]],[[]],[[]],0,[[30,30],39],[[121,121],39],[[122,122],39],0,[[30,101],102],[[30,101],102],[[121,101],102],[[121,101],102],[[122,101],102],[[]],[[]],[[]],0,0,0,[30],[121],[122],0,[[]],[[]],[[]],[[30,30],39],[[121,121],39],[[122,122],39],0,0,0,0,[30,3],[121,3],0,[[]],[[]],[[]],[[],62],[[],62],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],0,0,0,[1,123],[[]],[[]],[1,31],[1,31],[[]],[[]],[[1,30]],[[1,123]],[[1,123]],[[],3],[[],3],[[],4],[1,124],0,0,0,0,[55],[[125,[127,[126]],31,55]],[[55,56,121]],[[55,[128,[[127,[126]]]]],56],[[55,55]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[56,56],[129,129],[125,125],[55,55],[[]],[[]],[[]],[[]],[[],129],[[],125],[[],55],[[56,56],39],[[56,101],102],[[129,101],102],[[125,101],102],[[55,101],102],[[]],[[]],[[]],[[]],[56],[[]],[[]],[[]],[[]],[[56,56],39],[[[127,[126]],31,130],129],[[],125],[[],55],[56,3],[129,3],[125,3],[55,3],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],0,0,[[35,42],[[132,[131]]]],[[35,30,55]],[[35,42],[[132,[133]]]],[[35,42]],[[35,26],[[41,[[28,[27]]]]]],[35,123],[35,30],[[35,41,41,42,42],30],[[35,41,41,42],30],[[35,41,41],30],[[35,41,42,42],30],[[35,41,42],30],[[35,[63,[41]],[63,[42]]],30],[[35,41],30],[[35,42],30],[[35,31],30],[[35,31,[63,[41]],[63,[42]]],30],[[35,26]],[[35,26],[[42,[[28,[27]]]]]],[[]],[[]],[[]],[[]],[[35,30],1],[35,31],[35,31],[[],35],[[134,101],[[3,[135]]]],[[]],[[]],[35,62],[35,62],[35,62],[35,125],[35,136],[[35,137],136],[[]],[[]],[35],[[],35],[[[127,[126]],138],134],[126,35],[35,39],[35,136],[35,139],[35,[[32,[140]]]],[35,136],[35,[[32,[141]]]],[35,136],[35],[35],[35],[35,[[32,[142]]]],[[],3],[[],3],[[],3],[[],3],[35,31],[[],4],[[],4],[35,102],[35,102],[35,102],0,[42,[[132,[131]]]],[42,[[132,[133]]]],[42],[[41,41,42,42],30],[[41,41,42],30],[[41,41],30],[[41,42,42],30],[[41,42],30],[41,30],[42,30],0,0,0,0,0,0,0,[[],34],[143,34],[[]],[[]],[[[143,[110]]],[[143,[110]]]],[[]],[[],143],[[]],[[]],[[]],[[143,63],63],0,[[]],[[],39],[143,39],[[]],[143],[143,143],[[]],[[],3],[[],3],[[],3],[[],3],[[],4],0,0,0,0,0,[[]],[[[32,[30]],[32,[30]],63]],[[]],0,0,0,[[]],[[]],[[]],[[]],[133,133],[[]],[[],133],[132],[[]],[[]],[[],39],[133,39],[132],[[]],[[]],[[139,30],132],[[]],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,0,[[]],[[]],[27,27],[[]],[144,27],[[27,27],39],[[27,101],102],[[]],[[]],[[27,27],39],0,[[]],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[81,[145]]]],[[[147,[146,145]]]],[[]],[[]],[[]],[[]],[[],[[147,[148]]]],[[],[[147,[148]]]],[[[149,[145]]]],[[[147,[150,145]]]],[[],3],[[],3],[[],3],[[],3],[[[81,[145]]],3],[[[147,[146,145]]],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],0,0,[[]],[[]],[[]],[[]],[[151,151],151],[[152,[63,[151]]],151],[[],152],[151,151],[[]],[[]],[[]],[[]],[151,151],[[],152],[152],[151],[152,151],[[[151,[110]],31],[[63,[[151,[110]]]]]],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,[[]],[[]],[139,139],[[]],[[]],[[]],[[139,30],124],[[[153,[30]]],139],[[]],[[139,30],[[3,[[154,[30]]]]]],[[],3],[[],3],[[],4],0,[[]],[[]],[123,123],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],4],0,0,0,0,0,0,[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[155,156],[[]],[[]],[[]],[157],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4]],"p":[[3,"Context"],[3,"BatchPullBuild"],[4,"Result"],[3,"TypeId"],[3,"ChainPullBuild"],[3,"CrossJoinPullBuild"],[3,"FilterPullBuild"],[3,"FilterMapPullBuild"],[3,"FlattenPullBuild"],[3,"FoldEpochPullBuild"],[3,"HalfHashJoinPullBuild"],[3,"HandoffPullBuild"],[3,"IterPullBuild"],[3,"JoinPullBuild"],[3,"MapPullBuild"],[3,"FilterPushBuild"],[3,"FilterMapPushBuild"],[3,"FlattenPushBuild"],[3,"ForEachPushBuild"],[3,"HandoffPushBuild"],[3,"MapPushBuild"],[3,"PartitionPushBuild"],[3,"TeePushBuild"],[3,"HydroflowBuilder"],[3,"HandoffPullSurface"],[3,"TcpStream"],[3,"Message"],[3,"VecHandoff"],[3,"PivotSurface"],[3,"SubgraphId"],[15,"usize"],[4,"Option"],[3,"HandoffPushSurfaceReversed"],[8,"Any"],[3,"Hydroflow"],[3,"Iter"],[3,"VecDeque"],[3,"IterPullSurface"],[15,"bool"],[3,"StartPushSurface"],[6,"RecvPort"],[6,"SendPort"],[3,"BatchPullSurface"],[3,"ChainPullSurface"],[3,"CrossJoinPullSurface"],[6,"FilterNoCtxFn"],[3,"FilterSurface"],[6,"FilterMapNoCtxFn"],[3,"FilterMapSurface"],[6,"MapNoCtxFn"],[3,"MapSurface"],[3,"FlattenSurface"],[3,"FoldEpochPullSurface"],[3,"HalfHashJoinPullSurface"],[3,"FlowGraph"],[3,"FlowNodeId"],[6,"InspectMapNoCtxFunc"],[6,"InspectMapFunc"],[3,"JoinPullSurface"],[3,"MapScanSurface"],[3,"PivotPushSurface"],[3,"String"],[3,"Vec"],[6,"NetworkOut"],[6,"BroadcastSurface"],[15,"u64"],[3,"HashMap"],[6,"ExchangeSurface"],[3,"Global"],[3,"RandomState"],[3,"FilterPushSurfaceReversed"],[3,"FilterMapPushSurfaceReversed"],[3,"FlattenPushSurfaceReversed"],[3,"MapPushSurfaceReversed"],[3,"MapScanPushSurfaceReversed"],[3,"ForEachPushSurfaceReversed"],[3,"PartitionPushSurfaceReversed"],[3,"TeePushSurfaceReversed"],[3,"InputBuild"],[3,"FilterBuild"],[6,"SendCtx"],[3,"MapBuild"],[3,"PivotBuild"],[3,"TeeBuild"],[3,"Filter"],[3,"FilterMapBuild"],[3,"FilterMap"],[3,"FlattenBuild"],[3,"Flatten"],[3,"ForEach"],[3,"GroupBy"],[3,"Map"],[3,"PartitionBuild"],[3,"Partition"],[3,"Pivot"],[3,"CrossJoinState"],[3,"HalfHashJoinState"],[3,"BatchJoinState"],[3,"JoinState"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"BatchJoin"],[3,"CrossJoin"],[3,"HalfHashJoin"],[3,"SymmetricHashJoin"],[3,"PushHandoff"],[3,"Tee"],[3,"ClearDefault"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[8,"Hash"],[8,"PartialOrd"],[3,"Single"],[3,"Array"],[3,"MaskedArray"],[8,"Eq"],[3,"MonotonicMap"],[3,"HandoffId"],[3,"StateId"],[3,"StateHandle"],[3,"Waker"],[3,"FlowPartitionedGraph"],[15,"str"],[4,"Cow"],[8,"Into"],[3,"FlowEdgeSet"],[3,"HashSet"],[3,"SyncSender"],[3,"Input"],[3,"Buffer"],[3,"HandoffData"],[3,"Error"],[8,"Future"],[15,"u16"],[8,"HandoffMeta"],[3,"Reactor"],[3,"NonZeroUsize"],[15,"never"],[3,"SerdeGraph"],[3,"TeeingHandoff"],[3,"Bytes"],[8,"Handoff"],[4,"SEND"],[3,"PortCtx"],[8,"Polarity"],[6,"RecvCtx"],[4,"RECV"],[3,"Operator"],[3,"Query"],[3,"UnboundedSender"],[3,"SendError"],[3,"Once"],[3,"RefMut"],[3,"SendOnce"],[8,"PullBuild"],[8,"PushBuild"],[8,"IntoHydroflow"],[8,"PullSurface"],[8,"PushSurfaceReversed"],[8,"BaseSurface"],[8,"PushSurface"],[8,"AssembleFlowGraph"],[8,"Exchange"],[8,"Pusherator"],[8,"PusheratorBuild"],[8,"IteratorToPusherator"],[8,"Clear"],[8,"Collection"],[8,"Debottom"],[8,"LatticeRepr"],[8,"Compare"],[8,"Convert"],[8,"Top"],[8,"Merge"],[3,"BottomRepr"],[3,"DomPair"],[3,"DomPairRepr"],[3,"MapUnion"],[3,"MapUnionRepr"],[3,"Max"],[3,"MaxRepr"],[3,"Min"],[3,"MinRepr"],[3,"Pair"],[3,"PairRepr"],[3,"SetUnion"],[3,"SetUnionRepr"],[3,"TopRepr"],[8,"Tag1"],[8,"Tag2"],[4,"HASH_SET"],[4,"HASH_MAP"],[4,"BTREE_SET"],[4,"BTREE_MAP"],[4,"VEC"],[4,"SINGLE"],[4,"OPTION"],[3,"ARRAY"],[3,"MASKED_ARRAY"],[8,"GraphExt"],[8,"CanReceive"],[8,"TryCanReceive"],[8,"PortList"],[8,"PortListSplit"],[8,"Give"],[3,"Port"],[8,"Extend"],[8,"SplitPrefix"],[8,"Split"]]},\
"hydroflow_lang":{"doc":"","t":[0,0,0,0,4,13,6,6,3,3,13,13,4,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,17,17,8,3,3,12,11,11,11,11,11,11,10,10,11,11,11,12,12,11,12,12,11,11,11,12,12,12,12,12,12,12,12,10,12,11,11,11,11,11,11,12,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,12,11,11,12,11,12,11,11,11,11,11,11,11,3,3,4,3,3,13,13,13,3,3,13,13,4,13,3,3,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["graph","parse","pretty_span","union_find","Color","Comp","EdgePort","EdgePortRef","GraphNodeId","GraphSubgraphId","Handoff","Hoff","Node","Operator","OutboundEdges","Pull","Push","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","data","data","default","default","deserialize","deserialize","eq","eq","eq","flat_graph","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","into","into","into","into","ne","ne","node_color","ops","partial_cmp","partial_cmp","partial_cmp","partitioned_graph","serde_graph","serialize","serialize","span","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","FlatGraph","borrow","borrow_mut","default","edges","emit_operator_errors","fmt","from","from_hfcode","into","into_partitioned_graph","mermaid_string","surface_syntax_string","try_from","try_into","type_id","write_mermaid","write_surface_syntax","OPERATORS","OperatorConstraints","RANGE_0","RANGE_1","RangeTrait","WriteContextArgs","WriteIteratorArgs","arguments","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","contains","end_bound","from","from","from","hard_range_inn","hard_range_out","human_string","ident","inputs","into","into","into","is_pull","name","node_id","num_args","outputs","root","soft_range_inn","soft_range_out","start_bound","subgraph_id","try_from","try_from","try_from","try_into","try_into","try_into","type_arguments","type_id","type_id","type_id","write_iterator_fn","write_prologue_fn","PartitionedGraph","as_code","borrow","borrow_mut","default","edges","from","from","from_flat_graph","into","new","node_id_as_ident","node_id_as_string","node_to_txt","serde_string","to_serde_graph","try_from","try_into","type_id","write_serde_graph","SerdeGraph","borrow","borrow_mut","default","deserialize","edges","from","handoffs","into","new","nodes","serialize","subgraph_nodes","to_dot","to_mermaid","try_from","try_into","type_id","write_dot","write_mermaid","ArrowConnector","HfCode","HfStatement","IndexInt","Indexing","Link","Name","Named","NamedHfStatement","Operator","Operator","Paren","Pipeline","Pipeline","PipelineLink","PipelineParen","args","args","arrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bracket_token","clone","clone_into","cmp","connector","dst","eq","equals","fmt","from","from","from","from","from","from","from","from","from","from","hash","index","into","into","into","into","into","into","into","into","into","into","lhs","name","name","name_string","paren_token","paren_token","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","partial_cmp","path","pipeline","pipeline","rhs","span","span","span","span","span","span","span","span","span","span","span","src","statements","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_arguments","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","0","0","0","0","0","0","0","0","PrettyRowCol","PrettySpan","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","UnionFind","borrow","borrow_mut","clone","clone_into","default","find","from","into","new","same_set","to_owned","try_from","try_into","type_id","union","with_capacity"],"q":["hydroflow_lang","","","","hydroflow_lang::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow_lang::graph::Node","hydroflow_lang::graph::flat_graph","","","","","","","","","","","","","","","","","","hydroflow_lang::graph::ops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow_lang::graph::partitioned_graph","","","","","","","","","","","","","","","","","","","","hydroflow_lang::graph::serde_graph","","","","","","","","","","","","","","","","","","","","hydroflow_lang::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow_lang::parse::HfStatement","","hydroflow_lang::parse::Pipeline","","","","hydroflow_lang::pretty_span","","","","","","","","","","","","","","","","","","","","","","hydroflow_lang::union_find","","","","","","","","","","","","","","","",""],"d":["Graph representation stages for Hydroflow graphs.","","","","","Computation (yellow)","","","ID to identify a node (operator or handoff) in both …","ID to identify a subgraph in …","","Handoff (red) – not a color for operators, inserted …","","","BTreeMap is used to ensure iteration order matches <code>IndexInt</code>…","Pull (green)","Push (blue)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Validates that operators have valid number of inputs, …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Input argument range required to not show an error.","Output argument range required to not show an error.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Operator’s name.","","Number of arguments i.e. <code>operator(a, b, c)</code> has <code>num_args = 3</code>…","","","Input argument range required to not show a warning.","Output argument range required to not show an warning.","","","","","","","","","","","","","Generate iterator or pusherator code inside the subgraphs.","Generate code which runs once outside the subgraph to set …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper struct which displays the span as <code>row:col</code> for human …","Helper struct which displays the span as <code>path:row:col</code> for …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,3,0,0,0,0,8,3,0,8,0,3,3,8,1,2,3,8,1,2,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,0,8,1,2,3,8,1,1,2,2,3,1,2,8,1,2,3,1,2,0,0,1,2,3,0,0,1,2,8,1,2,3,8,1,2,3,8,1,2,3,8,1,2,3,42,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,43,44,45,43,44,45,43,46,46,44,45,43,44,44,46,45,43,44,45,43,43,44,45,44,43,45,44,44,46,45,44,45,43,44,45,43,43,44,45,43,44,44,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,0,0,32,32,30,0,0,32,32,0,30,0,0,24,24,35,17,30,31,32,33,34,35,36,24,26,17,30,31,32,33,34,35,36,24,26,36,26,26,26,34,35,26,31,26,17,30,31,32,33,34,35,36,24,26,26,36,17,30,31,32,33,34,35,36,24,26,34,24,31,24,33,24,17,30,31,32,33,34,35,36,24,26,26,24,31,33,34,17,30,31,32,33,34,35,36,24,26,26,35,17,26,17,30,31,32,33,34,35,36,24,26,17,30,31,32,33,34,35,36,24,26,17,30,31,32,33,34,35,36,24,26,24,17,30,31,32,33,34,35,36,24,26,26,47,48,49,50,51,52,37,38,0,0,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[]],[[]],[[]],[[1,1],4],[[2,2],4],[[3,3],4],[1,5],[2,5],[[],1],[[],2],[[],[[6,[1]]]],[[],[[6,[2]]]],[[1,1],7],[[2,2],7],[[3,3],7],0,[[8,9],10],[[1,9],10],[[2,9],10],[[3,9],10],[[]],[[]],[5,1],[[]],[5,2],[[]],[1],[2],[[]],[[]],[[]],[[]],[[1,1],7],[[2,2],7],[[8,11,11],[[12,[3]]]],0,[[1,1],[[12,[4]]]],[[2,2],[[12,[4]]]],[[3,3],[[12,[4]]]],0,0,[1,6],[2,6],[8,13],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[],14],[[],14],0,0,[[]],[[]],[[],15],[15,16],[15,7],[[15,9],10],[[]],[17,15],[[]],[15,18],[15,19],[15,19],[[],6],[[],6],[[],14],[15,10],[15,10],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],20],[[]],[[]],[[]],0,0,[[],19],0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[],20],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[],14],[[],14],[[],14],0,0,0,[[18,21],21],[[]],[[]],[[],18],[18,16],[15,18],[[]],[15,18],[[]],[[],18],[[18,1,7],22],[[18,1,7],19],[[18,1],19],[18,19],[18,23],[[],6],[[],6],[[],14],[18,10],0,[[]],[[]],[[],23],[[],[[6,[23]]]],0,[[]],0,[[]],[[],23],0,[23,6],0,[23,19],[23,19],[[],6],[[],6],[[],14],[23,10],[23,10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[24,25],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[26,26],[[]],[[26,26],4],0,0,[[26,26],7],0,[[26,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[24,27],0,[24,19],0,0,[28,[[29,[17]]]],[28,[[29,[30]]]],[28,[[29,[31]]]],[28,[[29,[32]]]],[28,[[29,[33]]]],[28,[[29,[34]]]],[28,[[29,[35]]]],[28,[[29,[36]]]],[28,[[29,[24]]]],[28,[[29,[26]]]],[[26,26],[[12,[4]]]],0,0,0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,[[]],[[17,21]],[[30,21]],[[31,21]],[[32,21]],[[33,21]],[[34,21]],[[35,21]],[[36,21]],[[24,21]],[[26,21]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[24,[[12,[25]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[37,9],10],[[38,9],10],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],0,[[]],[[]],[[[40,[39]]],[[40,[39]]]],[[]],[[],[[40,[41]]]],[40],[[]],[[]],[[],40],[40,7],[[]],[[],6],[[],6],[[],14],[40],[11,40]],"p":[[3,"GraphNodeId"],[3,"GraphSubgraphId"],[4,"Color"],[4,"Ordering"],[3,"KeyData"],[4,"Result"],[15,"bool"],[4,"Node"],[3,"Formatter"],[6,"Result"],[15,"usize"],[4,"Option"],[3,"Span"],[3,"TypeId"],[3,"FlatGraph"],[8,"Iterator"],[3,"HfCode"],[3,"PartitionedGraph"],[3,"String"],[4,"Bound"],[3,"TokenStream"],[3,"Ident"],[3,"SerdeGraph"],[3,"Operator"],[3,"Punctuated"],[3,"IndexInt"],[3,"Path"],[6,"ParseStream"],[6,"Result"],[4,"HfStatement"],[3,"NamedHfStatement"],[4,"Pipeline"],[3,"PipelineParen"],[3,"PipelineLink"],[3,"ArrowConnector"],[3,"Indexing"],[3,"PrettySpan"],[3,"PrettyRowCol"],[8,"Clone"],[3,"UnionFind"],[8,"Default"],[13,"Operator"],[3,"WriteIteratorArgs"],[3,"OperatorConstraints"],[3,"WriteContextArgs"],[8,"RangeTrait"],[13,"Named"],[13,"Pipeline"],[13,"Paren"],[13,"Link"],[13,"Name"],[13,"Operator"]]},\
"hydroflow_macro":{"doc":"","t":[14,14],"n":["hydroflow_parser","hydroflow_syntax"],"q":["hydroflow_macro",""],"d":["",""],"i":[0,0],"f":[0,0],"p":[]},\
"relalg":{"doc":"","t":[13,13,4,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12],"n":["Bool","ColRef","Datum","Eq","Int","Literal","Plus","ScalarExpr","String","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","eval","fmt","fmt","from","from","hash","hash","into","into","is_true","ne","ne","span","to_owned","to_owned","to_tokens","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","1","1"],"q":["relalg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","relalg::Datum","","","relalg::ScalarExpr","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,0,2,1,2,2,0,1,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,1,2,2,1,2,2,1,2,1,2,1,2,10,11,12,13,14,15,16,15,16],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[2,1],[[1,4],5],[[2,4],5],[[]],[[]],[1],[2],[[]],[[]],[1,3],[[1,1],3],[[2,2],3],[[],6],[[]],[[]],[[2,7]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,0,0,0,0,0],"p":[[4,"Datum"],[4,"ScalarExpr"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Span"],[3,"TokenStream"],[4,"Result"],[3,"TypeId"],[13,"Int"],[13,"String"],[13,"Bool"],[13,"Literal"],[13,"ColRef"],[13,"Eq"],[13,"Plus"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
